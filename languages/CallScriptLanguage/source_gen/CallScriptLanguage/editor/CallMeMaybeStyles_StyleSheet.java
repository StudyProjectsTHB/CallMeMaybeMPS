package CallScriptLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import java.awt.Color;
import jetbrains.mps.editor.runtime.style.Padding;
import jetbrains.mps.editor.runtime.style.Measure;
import jetbrains.mps.nodeEditor.MPSColors;

public class CallMeMaybeStyles_StyleSheet {
  public static class ChatBotNameStyleClass extends AbstractStyleClass {
    public ChatBotNameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_SIZE, 30);
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class ChatNodeCategoryStyleClass extends AbstractStyleClass {
    public ChatNodeCategoryStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_SIZE, 25);
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    }

  }
  public static class ListStyleClass extends AbstractStyleClass {
    public ListStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.SELECTABLE, false);
    }

  }
  public static class ChatNodeNamePrefixStyleClass extends AbstractStyleClass {
    public ChatNodeNamePrefixStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_SIZE, 18);
      style.set(StyleAttributes.PADDING_LEFT, new Padding(2, Measure.SPACES));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class ChatNodeNameStyleClass extends AbstractStyleClass {
    public ChatNodeNameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_SIZE, 18);
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class ChatNodeTextStyleClass extends AbstractStyleClass {
    public ChatNodeTextStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.PADDING_LEFT, new Padding(6, Measure.SPACES));
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class VariableValueStyleClass extends AbstractStyleClass {
    public VariableValueStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.gray));
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(5732959)));
    }

  }
  public static class ChatNodeAttributeStyleClass extends AbstractStyleClass {
    public ChatNodeAttributeStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.PADDING_LEFT, new Padding(6, Measure.SPACES));
    }

  }
  public static class ExprKeyStyleClass extends AbstractStyleClass {
    public ExprKeyStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(3577406)));
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class SimpleExprKeyStyleClass extends AbstractStyleClass {
    public SimpleExprKeyStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(3577406)));
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.gray));
    }

  }
  public static class ActionKeyStyleClass extends AbstractStyleClass {
    public ActionKeyStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(4360181)));
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class RefStyleClass extends AbstractStyleClass {
    public RefStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(14390850)));
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class VariableNameStyleClass extends AbstractStyleClass {
    public VariableNameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(3510476)));
      style.set(StyleAttributes.NULL_TEXT_COLOR, getStyleRegistry().getSimpleColor(new Color(16737119)));
    }

  }
  public static class SeperatorStyleClass extends AbstractStyleClass {
    public SeperatorStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
    }

  }
}
