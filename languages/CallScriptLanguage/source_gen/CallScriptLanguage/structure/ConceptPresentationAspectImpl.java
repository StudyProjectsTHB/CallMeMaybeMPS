package CallScriptLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActionKey;
  private ConceptPresentation props_AndKeyExpression;
  private ConceptPresentation props_BinaryKeyExpression;
  private ConceptPresentation props_ChatBot;
  private ConceptPresentation props_ChatNode;
  private ConceptPresentation props_Connection;
  private ConceptPresentation props_ContinuingChatNode;
  private ConceptPresentation props_Key;
  private ConceptPresentation props_KeyExpression;
  private ConceptPresentation props_NotKeyExpression;
  private ConceptPresentation props_OrKeyExpression;
  private ConceptPresentation props_SimpleKeyExpression;
  private ConceptPresentation props_VariableChatNode;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionKey:
        if (props_ActionKey == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActionKey = cpb.create();
        }
        return props_ActionKey;
      case LanguageConceptSwitch.AndKeyExpression:
        if (props_AndKeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&");
          props_AndKeyExpression = cpb.create();
        }
        return props_AndKeyExpression;
      case LanguageConceptSwitch.BinaryKeyExpression:
        if (props_BinaryKeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinaryKeyExpression = cpb.create();
        }
        return props_BinaryKeyExpression;
      case LanguageConceptSwitch.ChatBot:
        if (props_ChatBot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChatBot = cpb.create();
        }
        return props_ChatBot;
      case LanguageConceptSwitch.ChatNode:
        if (props_ChatNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChatNode = cpb.create();
        }
        return props_ChatNode;
      case LanguageConceptSwitch.Connection:
        if (props_Connection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x13a7dce9ad43efL, 0xa0338212155a1b91L, 0x72ca8e62f371e5a6L, 0x78d3578bca6ace60L, "chatNode", "", "");
          props_Connection = cpb.create();
        }
        return props_Connection;
      case LanguageConceptSwitch.ContinuingChatNode:
        if (props_ContinuingChatNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ContinuingChatNode = cpb.create();
        }
        return props_ContinuingChatNode;
      case LanguageConceptSwitch.Key:
        if (props_Key == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Key");
          props_Key = cpb.create();
        }
        return props_Key;
      case LanguageConceptSwitch.KeyExpression:
        if (props_KeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_KeyExpression = cpb.create();
        }
        return props_KeyExpression;
      case LanguageConceptSwitch.NotKeyExpression:
        if (props_NotKeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("!");
          props_NotKeyExpression = cpb.create();
        }
        return props_NotKeyExpression;
      case LanguageConceptSwitch.OrKeyExpression:
        if (props_OrKeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("|");
          props_OrKeyExpression = cpb.create();
        }
        return props_OrKeyExpression;
      case LanguageConceptSwitch.SimpleKeyExpression:
        if (props_SimpleKeyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_SimpleKeyExpression = cpb.create();
        }
        return props_SimpleKeyExpression;
      case LanguageConceptSwitch.VariableChatNode:
        if (props_VariableChatNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableChatNode = cpb.create();
        }
        return props_VariableChatNode;
    }
    return null;
  }
}
